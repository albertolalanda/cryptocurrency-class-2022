Wei
Guei (factor 9)
Ether (factor 18)

1 Wei = 0,000000001 Guei = 0,000000000000000001 Ether
1000000000 Wei = 1 Guei = 0,000000001 Ether
1000000000000000000 Wei = 1000000000 Guei = 1 Ether


Tricks to distinguish if an address is a smart contract or an Ethereum account? check the code of the contract; two examples:

function checkContract(address addr) public view returns (bool) {
	bytes32 accountHash =  0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;                                                                                             
	bytes32 codehash;
	assembly {
		codehash := extcodehash(addr)
	}
	return (codehash != 0x0 && codehash != accountHash);
}

function isContract(address addr) public view returns (bool) {
	uint size;
	assembly { size := extcodesize(addr) }
	return size > 0;
}

proxy-factory pattern - Deploy logic contract and then deploy cheap proxys that delegate call the logic with their own context
EIP-1822: Universal Upgradeable Proxy Standard (UUPS) - Proxy contract delegates call to logic contract and updates proxy contract storage. Logic contract can be updated and proxy contract will call the new address.

JSON with the NFT info - If youâ€™d like to put all item information on-chain, you can extend ERC721 to do so (though it will be rather costly) by providing a Base64 Data URI with the JSON schema encoded. You could also leverage IPFS to store the URI information, but these techniques are out of the scope of this overview guide

For ERC777 and ERC1155 etc. In order for our contract to receive ERC1155 tokens we can inherit from the convenience contract ERC1155Holder which handles the registering for us. Though we need to remember to implement functionality to allow tokens to be transferred out of our contract:

Reduce code size tips: -----------------------------------------

Function modifier instead of having condition, 
call internal function https://www.youtube.com/watch?v=XDqD3X8DCiw

Reduce gas cost tips: -----------------------------------------

function parameter CALLDATA > MEMORY

If we access state variable multiple times, load state into memory and update into state at the end.



Security flaws SmartContracts: -----------------------------------------

Re-use of the same msg.value, through a loop or some kind of batching/multicall function should not be done.

Methods of upgradable contracts: -----------------------------------------
https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/
Data separation - Contract with the logic calls -> contract with the data.
					Contract with the logic is upgradable.
Delegatecall-based proxies - Proxy contract holds data delegate calls -> logic contract 
					Contract with the logic is upgradable.
					If the order of data on the logic contract is not the same on proxy/data contract, a delegate call, can currupt the data on the proxy contract.
		Options to separate data and logic:
			Inherited storage, which uses Solidity inheritance to ensure that the caller and the callee have the same memory layout.
			Eternal storage, which is the key-value storage version of the logic separation that we saw above.
			Unstructured storage, which is the only strategy that does not suffer from potential memory corruption due to an incorrect memory layout. It relies on inline assembly code and custom memory management on storage variables.